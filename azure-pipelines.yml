# Pipelines are made of one or more jobs and may include resources and variables.
# Jobs are made of one or more steps plus some job-specific data. Steps can be
# tasks, scripts, or references to external templates.

jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      maxParallel: 2
      # matrix:
      #   py36:
      #     PY_VERSION: 3.6
      #   py37:
      #     PY_VERSION: 3.7
    variables:
      repoDir: '$(Build.Repository.LocalPath)'

    steps:
        # NOTE: On Linux, there is no write permission in the miniconda installation,
        # and the CondaEnvironment@1 does not honor a prefix. Therefore we can *not*
        # use the conda that comes with Azure as we do on Windows. This is also
        # documented in the following issue: https://github.com/Microsoft/vsts-tasks/issues/8299
        # Therefore we need to create our own conda environment from scratch.
      - task: CondaEnvironment@1
        inputs:
          updateConda: false
      - script: |
          ./ci_scripts/citest.sh $(repoDir)
       
  - job: macOS
    pool:
      vmImage: 'xcode9-macos10.13'
    strategy:
      maxParallel: 2
    variables:
      repoDir: '$(Build.Repository.LocalPath)'
    steps:
      - task: CondaEnvironment@1
        inputs:
          updateConda: false
      - script: |
          ./ci_scripts/citest.sh $(repoDir)
  - job: Windows
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      maxParallel: 2
    variables:
      repoDir: '$(Build.Repository.LocalPath)'
    steps:
      - task: CondaEnvironment@1
        inputs:
          updateConda: false
      - script: |
          conda config --set always_yes yes --set changeps1 no || exit 1
          conda update -q conda || exit 1
          conda install cookiecutter -c conda-forge  || exit 1
          conda install conda-build || exit 1
          cd .. || exit 1
          cookiecutter %repoDir% --overwrite-if-exists --no-input || exit 1
          cd cpptools || exit 1
          conda env create -f cpptools-dev-requirements.yml || exit 1
          activate cpptools-dev-requirements || exit 1
          mkdir build || exit 1
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release  ^
                -DDEPENDENCY_SEARCH_PREFIX="%CONDA_PREFIX%\Library" -DCMAKE_PREFIX_PATH="%CONDA_PREFIX%\Library" || exit 1
          make -j2 || exit 1
          make cpp-test || exit 1
          make python-test || exit 1
          echo "Completed script successfully" || exit 1
          echo Completed script successfully || exit 1
