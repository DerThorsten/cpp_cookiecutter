# Pipelines are made of one or more jobs and may include resources and variables.
# Jobs are made of one or more steps plus some job-specific data. Steps can be
# tasks, scripts, or references to external templates.

jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      maxParallel: 2
      # matrix:
      #   py36:
      #     PY_VERSION: 3.6
      #   py37:
      #     PY_VERSION: 3.7
    variables:
      repoDir: '$(Build.Repository.LocalPath)'

    steps:
        # NOTE: On Linux, there is no write permission in the miniconda installation,
        # and the CondaEnvironment@1 does not honor a prefix. Therefore we can *not*
        # use the conda that comes with Azure as we do on Windows. This is also
        # documented in the following issue: https://github.com/Microsoft/vsts-tasks/issues/8299
        # Therefore we need to create our own conda environment from scratch.
      - task: CondaEnvironment@1
        inputs:
          updateConda: false
      - script: |
          conda config --set always_yes yes --set changeps1 no || exit 1
          conda update -q conda || exit 1
          conda install cookiecutter -c conda-forge  || exit 1
          conda install conda-build || exit 1
          cd .. || exit 1
          cookiecutter $(repoDir) --overwrite-if-exists --no-input || exit 1
          cd cpptools || exit 1
          conda env create -f cpptools-dev-requirements.yml || exit 1
          source activate cpptools-dev-requirements || exit 1
          mkdir build || exit 1
          cd build || exit 1
          cmake .. || exit 1
          make -j2 || exit 1
          echo "Completed script successfully" || exit 1
  - job: macOS
    pool:
      vmImage: 'xcode9-macos10.13'
    strategy:
      maxParallel: 2
      # matrix:
      #   py36:
      #     PY_VERSION: 3.6
      #   py37:
      #     PY_VERSION: 3.7
    variables:
      repoDir: '$(Build.Repository.LocalPath)'
    steps:
      # This build is practially identical to the Linux build above. One ugly part
      # is the selection of the XCode version. The documentation suggests to either
      # use an "XCode task" or to manually set the XCode version using "xcode-select".
      # I could not get the XCode task to run without an XCode project first, so I
      # chose to use xcode-select. This works well, but requires to manually specify
      # the exact version below.
      # /Applications/Xcode.app/Contents/Developer
      # /Applications/Xcode_10.app/Contents/Developer
      # /Applications/Xcode_10.1.app/Contents/Developer
      # /Applications/Xcode_10.1_beta_2.app/Contents/Developer
      # /Applications/Xcode_10_beta.app/Contents/Developer
      # /Applications/Xcode_8.app/Contents/Developer
      # /Applications/Xcode_8.1.app/Contents/Developer
      # /Applications/Xcode_8.2.1.app/Contents/Developer
      # /Applications/Xcode_8.2.app/Contents/Developer
      # /Applications/Xcode_8.3.1.app/Contents/Developer
      # /Applications/Xcode_8.3.2.app/Contents/Developer
      # /Applications/Xcode_8.3.3.app/Contents/Developer
      # /Applications/Xcode_9.app/Contents/Developer
      # /Applications/Xcode_9.0.1.app/Contents/Developer
      # /Applications/Xcode_9.1.app/Contents/Developer
      # /Applications/Xcode_9.2.app/Contents/Developer
      # /Applications/Xcode_9.3.1.app/Contents/Developer
      # /Applications/Xcode_9.3.app/Contents/Developer
      # /Applications/Xcode_9.3_beta.app/Contents/Developer
      # /Applications/Xcode_9.4-beta.app/Contents/Developer
      # /Applications/Xcode_9.4.1.app/Contents/Developer
      # /Applications/Xcode_9.4.app/Contents/Developer
      # /Applications/Xcode_9.4_beta.app/Contents/Developer
      # /Applications/Xcode_9.4_beta_2.app/Contents/Developer
      - task: CondaEnvironment@1
        inputs:
          updateConda: false
      - script: |
          echo "Config conda" || exit 1
          conda config --set always_yes yes --set changeps1 no || exit 1
          echo "Update conda" || exit 1
          conda update -q conda || exit 1
          echo "create conda env myroot" || exit 1
          conda create -n myroot ||exit 1
          echo "activate" || exit 1
          source $CONDA/bin/activate myroot || exit 1
          echo "install cookiecutter" || exit 1
          conda install cookiecutter -c conda-forge  || exit 1
          echo "install conda-build" || exit 1
          conda install conda-build || exit 1
          cd .. || exit 1
          echo "run cookiecutter || exit 1
          cookiecutter $(repoDir)  --overwrite-if-exists --no-input || exit 1
          cd cpptools || exit 1
          echo "Activating conda environment" || exit 1
          conda env create -f cpptools-dev-requirements.yml || exit 1
          echo "source conda env" || exit 1
          source $CONDA/bin/activate cpptools-dev-requirements || exit 1
          mkdir build || exit 1
          cd build || exit 1
          echo "cmake" || exit 1
          cmake .. || exit 1
          echo "make" || exit 1
          make -j2 || exit 1
          echo "Completed script successfully" || exit 1
  - job: Windows
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      maxParallel: 2
      # matrix:
      #   py36:
      #     PY_VERSION: 3.6
      #     VS_VERSION: 2015
      #   # py27:
      #   #   PY_VERSION: 2.7
    variables:
      repoDir: '$(Build.Repository.LocalPath)'
    steps:
      # installed compilers:
      # "c:\Program Files (x86)\Microsoft Visual Studio\2017"
      # "c:\Program Files (x86)\Microsoft Visual Studio 10.0"
      # "c:\Program Files (x86)\Microsoft Visual Studio 11.0"
      # "c:\Program Files (x86)\Microsoft Visual Studio 12.0"
      # "c:\Program Files (x86)\Microsoft Visual Studio 14.0"
      - task: CondaEnvironment@1
        inputs:
          updateConda: false
      - script: |
          conda config --set always_yes yes --set changeps1 no || exit 1
          conda update -q conda || exit 1
          conda install cookiecutter -c conda-forge  || exit 1
          conda install conda-build || exit 1
          cd .. || exit 1
          cookiecutter %repoDir% --overwrite-if-exists --no-input || exit 1
          cd cpptools || exit 1
          conda env create -f cpptools-dev-requirements.yml || exit 1
          activate cpptools-dev-requirements || exit 1
          mkdir build || exit 1
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release  ^
                -DDEPENDENCY_SEARCH_PREFIX="%CONDA_PREFIX%\Library" -DCMAKE_PREFIX_PATH="%CONDA_PREFIX%\Library" || exit 1
          make -j2 || exit 1
          echo "Completed script successfully" || exit 1
          echo Completed script successfully || exit 1
