# Pipelines are made of one or more jobs and may include resources and variables.
# Jobs are made of one or more steps plus some job-specific data. Steps can be
# tasks, scripts, or references to external templates.

jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      maxParallel: 2
      # matrix:
      #   py36:
      #     PY_VERSION: 3.6
      #   py37:
      #     PY_VERSION: 3.7
    variables:
      repoDir: '$(Build.Repository.LocalPath)'

    steps:
        # NOTE: On Linux, there is no write permission in the miniconda installation,
        # and the CondaEnvironment@1 does not honor a prefix. Therefore we can *not*
        # use the conda that comes with Azure as we do on Windows. This is also
        # documented in the following issue: https://github.com/Microsoft/vsts-tasks/issues/8299
        # Therefore we need to create our own conda environment from scratch.
      - task: CondaEnvironment@1
        inputs:
          updateConda: false
      - script: |
          conda config --set always_yes yes --set changeps1 no || exit 1
          conda update -q conda || exit 1
          conda env create -f {{cookiecutter.package_name}}-dev-requirements.yml || exit 1
          source activate {{cookiecutter.package_name}}-dev-requirements || exit 1
          mkdir build || exit 1
          cd build || exit 1
          cmake .. || exit 1
          make -j2 || exit 1
          make cpp-test || exit 1
          {% if cookiecutter.python_bindings == 'yes' -%}
          make python-test || exit 1
          {% endif %}
          echo "run cpp example" || exit 1
          cd examples || exit 1
          ./hello_world || exit 1
          cd .. || exit 1
          echo "run cpp benchmark" || exit 1
          cd benchmark || exit 1
          ./benchmark_{{cookiecutter.cmake_project_name}} || exit 1
          cd .. || exit 1
          echo "Completed script successfully" || exit 1


  - job: macOS
    pool:
      vmImage: 'xcode9-macos10.13'
    strategy:
      maxParallel: 2
      # matrix:
      #   py36:
      #     PY_VERSION: 3.6
      #   py37:
      #     PY_VERSION: 3.7
    variables:
      repoDir: '$(Build.Repository.LocalPath)'
    steps:
      - bash: echo "##vso[task.prependpath]$CONDA/bin"
        displayName: Add conda to PATH

      - script: |
          source activate myroot
          conda config --set always_yes yes --set changeps1 no
          conda env create -f {{cookiecutter.package_name}}-dev-requirements.yml
          echo "source conda env"
          source activate {{cookiecutter.package_name}}-dev-requirements
          mkdir build
          cd build
          echo "cmake"
          cmake ..
          echo "make"
          make -j2
          make python-test
          echo "Completed script successfully"



  - job:
    displayName: vs2017-win2016
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      maxParallel: 2
      # matrix:
      #   py36:
      #     PY_VERSION: 3.6
      #     VS_VERSION: 2015
      #   # py27:
      #   #   PY_VERSION: 2.7
    variables:
      repoDir: '$(Build.Repository.LocalPath)'
    steps:
    - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      displayName: Add conda to PATH

    - script: |
        echo "create"
        conda env create   -f {{cookiecutter.package_name}}-dev-requirements.yml
        echo "done"
      displayName: create dev requirements env

    - script: |
        echo "cd path"
        cd ..\{{cookiecutter.package_name}}
        echo "activate"
        call activate {{cookiecutter.package_name}}-dev-requirements
        echo "mkdir"
        mkdir build
        cd build
        echo "cmake gen"
        cmake .. -G"Visual Studio 15 2017 Win64" -DCMAKE_BUILD_TYPE=Release  ^
              -DDEPENDENCY_SEARCH_PREFIX="%CONDA_PREFIX%\Library" -DCMAKE_PREFIX_PATH="%CONDA_PREFIX%\Library"

      displayName: configure project
    - script: |
        echo "cd path"
        cd ..\{{cookiecutter.package_name}}\build
        echo "activate"
        call activate {{cookiecutter.package_name}}-dev-requirements
        cmake --build . --target ALL_BUILD

      displayName: build project
    - script: |
        echo "cd path"
        cd ..\{{cookiecutter.package_name}}\build 
        echo "activate"
        call activate {{cookiecutter.package_name}}-dev-requirements
        echo "run tests"
        cmake --build . --target python-test
        cmake --build . --target cpp-test

      displayName: run tests




